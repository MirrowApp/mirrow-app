---

---

<div
  id="particles-container"
  class="fixed inset-0 pointer-events-none overflow-hidden"
>
  <canvas id="particles-canvas"></canvas>
</div>

<script>
  class Particle {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    x: number;
    y: number;
    vx: number;
    vy: number;
    opacity: number;
    size: number;
    life: number;
    decay: number;

    constructor(canvas: HTMLCanvasElement) {
      this.canvas = canvas;
      this.ctx = canvas.getContext("2d")!;

      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.vx = (Math.random() - 0.5) * 0.5;
      this.vy = (Math.random() - 0.5) * 0.5;
      this.opacity = Math.random() * 0.5 + 0.1;
      this.size = Math.random() * 2 + 1;
      this.life = 1.0;
      this.decay = Math.random() * 0.002 + 0.001;
    }

    update() {
      this.x += this.vx;
      this.y += this.vy;
      if (this.x < 0) this.x = this.canvas.width;
      if (this.x > this.canvas.width) this.x = 0;
      if (this.y < 0) this.y = this.canvas.height;
      if (this.y > this.canvas.height) this.y = 0;
      this.life -= this.decay;
    }

    draw() {
      this.ctx.save();
      this.ctx.globalAlpha = this.opacity * this.life;
      this.ctx.fillStyle = "#ffffff";
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      this.ctx.fill();
      this.ctx.restore();
    }

    isDead() {
      return this.life <= 0;
    }
  }

  class ParticleSystem {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    particles: Particle[];
    maxParticles: number;
    animationId: number | null;

    constructor() {
      this.canvas = document.getElementById(
        "particles-canvas"
      ) as HTMLCanvasElement;
      this.ctx = this.canvas.getContext("2d")!;
      this.particles = [];
      this.maxParticles = 80;
      this.animationId = null;

      this.setupCanvas();
      this.setupEventListeners();
      this.start();
    }

    setupCanvas() {
      const resizeCanvas = () => {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      };

      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);
    }

    setupEventListeners() {
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          this.pause();
        } else {
          this.start();
        }
      });
    }

    addParticle() {
      if (this.particles.length < this.maxParticles) {
        this.particles.push(new Particle(this.canvas));
      }
    }

    update() {
      if (Math.random() < 0.02) {
        this.addParticle();
      }
      for (let i = this.particles.length - 1; i >= 0; i--) {
        const particle = this.particles[i];
        particle.update();
        if (particle.isDead()) {
          this.particles.splice(i, 1);
        }
      }
    }

    draw() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.particles.forEach((particle: Particle) => particle.draw());
    }

    animate() {
      this.update();
      this.draw();
      this.animationId = requestAnimationFrame(() => this.animate());
    }

    start() {
      if (!this.animationId) {
        for (let i = 0; i < 20; i++) {
          this.addParticle();
        }
        this.animate();
      }
    }

    pause() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
        this.animationId = null;
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new ParticleSystem();
  });
</script>

<style>
  #particles-container {
    z-index: -1;
  }

  #particles-canvas {
    width: 100%;
    height: 100%;
    display: block;
  }
</style>
